'use client';

import { useState, useEffect } from 'react';
import { hashEndpointWithScope } from '@selfxyz/core';
import CopyButton from '../ui/CopyButton';

export default function ScopeGenerator() {
  const [address, setAddress] = useState('');
  const [scope, setScope] = useState('');
  const [addressError, setAddressError] = useState('');
  const [scopeError, setScopeError] = useState('');
  const [hashedEndpoint, setHashedEndpoint] = useState('');


  // Ethereum address validation (0x followed by 40 hex characters)
  const validateEthereumAddress = (addr: string): boolean => {
    const ethRegex = /^0x[a-fA-F0-9]{40}$/;
    return ethRegex.test(addr);
  };

  // HTTPS URL validation
  const validateHttpsUrl = (url: string): boolean => {
    return url.startsWith('https://') && url.length > 8; // More than just "https://"
  };

  // Combined address validation (either Ethereum address or HTTPS URL)
  const validateAddress = (addr: string): boolean => {
    return validateEthereumAddress(addr) || validateHttpsUrl(addr);
  };

  // Scope validation (small caps ASCII, max 20 chars)
  const validateScope = (scopeValue: string): boolean => {
    const scopeRegex = /^[a-z0-9\s\-_.,!?]*$/;
    return scopeRegex.test(scopeValue) && scopeValue.length <= 20;
  };

  // Check if address is valid (not empty and passes validation)
  const isAddressValid = address && !addressError && validateAddress(address);

  // Check if scope is valid (not empty and passes validation)
  const isScopeValid = scope && !scopeError && validateScope(scope);

  // Check if both fields are valid
  const areBothValid = isAddressValid && isScopeValid;

  // Truncate long strings for better mobile display
  const truncateAddress = (address: string, startChars = 6, endChars = 4) => {
    if (address.length <= startChars + endChars + 3) return address;
    return `${address.slice(0, startChars)}...${address.slice(-endChars)}`;
  };

  // Generate hash automatically when both fields have values
  useEffect(() => {
    if (address && scope) {
      try {
        const hash = hashEndpointWithScope(address, scope);
        setHashedEndpoint(hash);
      } catch (error) {
        console.error('Error generating hash:', error);
        setHashedEndpoint('Error generating hash');
      }
    } else {
      setHashedEndpoint('');
    }
  }, [address, scope]);

  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setAddress(value);

    if (value === '') {
      setAddressError('');
    } else if (!validateAddress(value)) {
      setAddressError('Please enter a valid Ethereum address (0x...) or HTTPS URL (https://...)');
    } else {
      setAddressError('');
    }
  };

  const handleScopeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;

    // Only allow lowercase ASCII characters and limit to 25 chars
    if (validateScope(value) && value.length <= 25) {
      setScope(value);
      setScopeError('');
    } else if (value.length > 25) {
      setScopeError('Scope must be 25 characters or less');
    } else {
      setScopeError('Scope must contain only lowercase ASCII characters');
    }
  };



  return (
    <div className="bg-white rounded-xl border border-gray-200 p-4 sm:p-6 shadow-lg mb-8 sm:mb-12 mx-2 sm:mx-0">
      <div className="flex items-center mb-4 sm:mb-6">
        <div className="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-[#5BFFB6] to-[#4AE6A0] rounded-lg flex items-center justify-center mr-3 hover:rotate-12 transition-transform duration-300">
          <span className="text-base sm:text-lg">üîß</span>
        </div>
        <div>
          <h2 className="text-lg sm:text-xl font-bold text-black">Scope Generator</h2>
          <p className="text-gray-600 text-xs sm:text-sm">Hash the scope seed with your address or DNS to generate the scope value</p>
        </div>
      </div>

      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200 mb-8">
        <div className="flex items-start">
          <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-4 mt-1">
            <span className="text-lg">üí°</span>
          </div>
          <div>
            <h4 className="font-bold text-blue-900 mb-2">What is a Scope?</h4>
            <p className="text-blue-800 text-sm leading-relaxed">
              The scope is the final value you set in your Self Verification contract. It&apos;s generated by hashing your scope seed üå± 
              with your address or DNS, creating a unique identifier for your verification requirements.
            </p>
          </div>
        </div>
      </div>

      <div className="max-w-2xl mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Address Input */}
          <div>
            <label className="block text-sm font-semibold text-gray-900 mb-3">
              Address or URL
            </label>
            <div className="relative">
              <input
                id="address"
                type="text"
                value={address}
                onChange={handleAddressChange}
                placeholder="0x1234... or https://example.com"
                className={`w-full px-4 py-3 border-2 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 transition-all font-mono text-sm transform focus:scale-[1.02] hover:shadow-md overflow-hidden ${addressError
                  ? 'border-red-300 bg-red-50 focus:border-red-500 focus:ring-red-200'
                  : isAddressValid
                    ? 'border-green-300 bg-green-50 focus:border-green-500 focus:ring-green-200'
                    : 'border-gray-200 bg-white focus:border-blue-500 focus:ring-blue-200'
                  }`}
                style={{ wordBreak: 'break-all', overflowWrap: 'break-word', textOverflow: 'ellipsis', direction: 'ltr' }}
                inputMode="text"
              />
              {isAddressValid && (
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                  <span className="text-green-500 text-lg">‚úì</span>
                </div>
              )}
            </div>
            {addressError && (
              <p className="mt-2 text-sm text-red-600 flex items-center">
                <span className="mr-1">‚ö†Ô∏è</span>
                {addressError}
              </p>
            )}
          </div>

          {/* Scope Input */}
          <div>
            <label className="block text-sm font-semibold text-gray-900 mb-3">
              Scope seed üå±
            </label>
            <div className="relative">
              <input
                id="scope"
                type="text"
                value={scope}
                onChange={handleScopeChange}
                placeholder="enter scope (max 20 chars)"
                maxLength={20}
                className={`w-full px-4 py-3 border-2 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 transition-all transform focus:scale-[1.02] hover:shadow-md ${scopeError
                  ? 'border-red-300 bg-red-50 focus:border-red-500 focus:ring-red-200'
                  : isScopeValid
                    ? 'border-green-300 bg-green-50 focus:border-green-500 focus:ring-green-200'
                    : 'border-gray-200 bg-white focus:border-blue-500 focus:ring-blue-200'
                  }`}
              />
              {isScopeValid && (
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                  <span className="text-green-500 text-lg">‚úì</span>
                </div>
              )}
            </div>
            <div className="flex justify-between items-center mt-2">
              {scopeError && (
                <p className="text-sm text-red-600 flex items-center">
                  <span className="mr-1">‚ö†Ô∏è</span>
                  {scopeError}
                </p>
              )}
              <p className="text-sm text-gray-500 ml-auto">
                {scope.length}/20 chars
              </p>
            </div>
          </div>
        </div>

        {/* Results Display */}
        {hashedEndpoint && (
          <div className="mt-8">
            {!areBothValid && (
              <div className="mb-6 p-4 bg-amber-50 border border-amber-200 rounded-xl">
                <div className="flex items-center">
                  <span className="text-amber-500 text-xl mr-3">‚ö†Ô∏è</span>
                  <p className="text-amber-800 font-medium">
                    Warning: One or both fields are not valid. The hash below may not be accurate.
                  </p>
                </div>
              </div>
            )}

            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6 border border-blue-200">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-bold text-gray-900 flex items-center">
                  <span className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                    üéØ
                  </span>
                  Generated Scope
                </h3>
                <CopyButton 
                  text={hashedEndpoint}
                  variant="secondary"
                  size="md"
                  className="shadow-sm hover:shadow-md"
                >
                  Copy
                </CopyButton>
              </div>

              <div className="bg-white rounded-lg p-4 border border-gray-200 shadow-sm overflow-hidden">
                <div className="text-sm text-gray-900 font-mono leading-relaxed break-all overflow-wrap-anywhere">
                  {hashedEndpoint}
                </div>
              </div>

              <div className="mt-4 text-sm text-blue-700">
                <p className="flex items-center">
                  <span className="mr-2">üí°</span>
                  Use this value as the scope parameter in your Self Verification contract
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Input Summary */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
            <h4 className="font-semibold text-gray-900 mb-2">Address/URL</h4>
            <p className={`text-sm ${isAddressValid ? 'text-green-600' : 'text-gray-500'}`}
              style={{wordBreak: 'break-all'}}>
              {address
                ? truncateAddress(address, 8, 6)
                : 'Not set'}
              {isAddressValid && <span className="ml-2">‚úì</span>}
            </p>
          </div>
          <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
            <h4 className="font-semibold text-gray-900 mb-2">Scope Seed</h4>
            <p className={`text-sm ${isScopeValid ? 'text-green-600' : 'text-gray-500'}`}>
              {scope || 'Not set'}
              {isScopeValid && <span className="ml-2">‚úì</span>}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
} 